// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Export Java Selenide should export a suite 1`] = `
"// Generated by Selenium IDE
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import com.codeborne.selenide.Configuration;
import com.codeborne.selenide.WebDriverRunner;
import static com.codeborne.selenide.Selectors.*;
import static com.codeborne.selenide.Condition.*;
import static com.codeborne.selenide.Selenide.*;
import static org.junit.jupiter.api.Assertions.*;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Keys;
import java.util.*;
public class LoginTest {
  private Map<String, Object> vars;
  @BeforeEach
  public void setUp() {
    Configuration.browser = \\"chrome\\";
    vars = new HashMap<>();
  }
  @AfterEach
  public void tearDown() {
  }
  @Test
  public void validcredentials() {
    open(\\"http://the-internet.herokuapp.com/login\\");
    WebDriverRunner.getWebDriver().manage().window().setSize(new Dimension(1440, 1177));
    $(\\"#username\\").val(\\"tomsmith\\");
    $(\\"#password\\").val(\\"SuperSecretPassword!\\");
    $(\\"#login button\\").click();
    $(\\".flash.success\\").shouldHave(text(\\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"));
  }
  @Test
  public void invalidcredentials() {
    open(\\"http://the-internet.herokuapp.com/login\\");
    WebDriverRunner.getWebDriver().manage().window().setSize(new Dimension(1440, 1177));
    $(\\"#username\\").val(\\"blah\\");
    $(\\"#password\\").val(\\"blah\\");
    $(\\"#login button\\").click();
    $(\\"#flash\\").shouldHave(text(\\"Your username is invalid!\\\\\\\\\\\\\\\\n×\\"));
  }
}
"
`;

exports[`Code Export Java Selenide should export a suite that uses control flow commands 1`] = `
"// Generated by Selenium IDE
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import com.codeborne.selenide.Configuration;
import com.codeborne.selenide.WebDriverRunner;
import static com.codeborne.selenide.Selectors.*;
import static com.codeborne.selenide.Condition.*;
import static com.codeborne.selenide.Selenide.*;
import static org.junit.jupiter.api.Assertions.*;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Keys;
import java.util.*;
public class ControlflowTest {
  private Map<String, Object> vars;
  @BeforeEach
  public void setUp() {
    Configuration.browser = \\"chrome\\";
    vars = new HashMap<>();
  }
  @AfterEach
  public void tearDown() {
  }
  @Test
  public void controlflowif() {
    vars.put(\\"myVar\\", executeJavaScript(\\"return 'a'\\"));
    if ((Boolean) executeJavaScript(\\"return (arguments[0] === 'a')\\", vars.get(\\"myVar\\"))) {
      vars.put(\\"output\\", executeJavaScript(\\"return 'a'\\"));
    } else if ((Boolean) executeJavaScript(\\"return (arguments[0] === 'b')\\", vars.get(\\"myVar\\"))) {
      vars.put(\\"output\\", executeJavaScript(\\"return 'b'\\"));
    } else {
      vars.put(\\"output\\", executeJavaScript(\\"return 'c'\\"));
    }
    assertEquals(vars.get(\\"output\\").toString(), \\"a\\");
  }
  @Test
  public void controlflowelseif() {
    vars.put(\\"myVar\\", executeJavaScript(\\"return 'b'\\"));
    if ((Boolean) executeJavaScript(\\"return (arguments[0] === 'a')\\", vars.get(\\"myVar\\"))) {
      vars.put(\\"output\\", executeJavaScript(\\"return 'a'\\"));
    } else if ((Boolean) executeJavaScript(\\"return (arguments[0] === 'b')\\", vars.get(\\"myVar\\"))) {
      vars.put(\\"output\\", executeJavaScript(\\"return 'b'\\"));
    } else {
      vars.put(\\"output\\", executeJavaScript(\\"return 'c'\\"));
    }
    assertEquals(vars.get(\\"output\\").toString(), \\"b\\");
  }
  @Test
  public void controlflowelse() {
    vars.put(\\"myVar\\", executeJavaScript(\\"return 'c'\\"));
    if ((Boolean) executeJavaScript(\\"return (arguments[0] === 'a')\\", vars.get(\\"myVar\\"))) {
      vars.put(\\"output\\", executeJavaScript(\\"return 'a'\\"));
    } else if ((Boolean) executeJavaScript(\\"return (arguments[0] === 'b')\\", vars.get(\\"myVar\\"))) {
      vars.put(\\"output\\", executeJavaScript(\\"return 'b'\\"));
    } else {
      vars.put(\\"output\\", executeJavaScript(\\"return 'c'\\"));
    }
    assertEquals(vars.get(\\"output\\").toString(), \\"c\\");
  }
  @Test
  public void controlflowdo() {
    vars.put(\\"check\\", executeJavaScript(\\"return 1\\"));
    do {
      vars.put(\\"check\\", executeJavaScript(\\"return arguments[0] + 1\\", vars.get(\\"check\\")));
    } while ((Boolean) executeJavaScript(\\"return (arguments[0] < 3)\\", vars.get(\\"check\\")));
    assertEquals(vars.get(\\"check\\").toString(), \\"3\\");
  }
  @Test
  public void controlflowtimes() {
    vars.put(\\"check\\", executeJavaScript(\\"return 1\\"));
    Integer times = 2;
    for(int i = 0; i < times; i++) {
      vars.put(\\"check\\", executeJavaScript(\\"return arguments[0] + 1\\", vars.get(\\"check\\")));
    }
    assertEquals(vars.get(\\"check\\").toString(), \\"3\\");
  }
  @Test
  public void controlflowwhile() {
    vars.put(\\"check\\", executeJavaScript(\\"return 1\\"));
    while ((Boolean) executeJavaScript(\\"return (arguments[0] < 3)\\", vars.get(\\"check\\"))) {
      vars.put(\\"check\\", executeJavaScript(\\"return arguments[0] + 1\\", vars.get(\\"check\\")));
    }
    assertEquals(vars.get(\\"check\\").toString(), \\"3\\");
  }
}
"
`;

exports[`Code Export Java Selenide should export a suite with a reused test method 1`] = `
"// Generated by Selenium IDE
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import com.codeborne.selenide.Configuration;
import com.codeborne.selenide.WebDriverRunner;
import static com.codeborne.selenide.Selectors.*;
import static com.codeborne.selenide.Condition.*;
import static com.codeborne.selenide.Selenide.*;
import static org.junit.jupiter.api.Assertions.*;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Keys;
import java.util.*;
public class LoginTest {
  private Map<String, Object> vars;
  @BeforeEach
  public void setUp() {
    Configuration.browser = \\"chrome\\";
    vars = new HashMap<>();
  }
  @AfterEach
  public void tearDown() {
  }
  public void login() {
    open(\\"https://the-internet.herokuapp.com/\\");
    $(byLinkText(\\"Form Authentication\\")).click();
    $(\\"#username\\").val(vars.get(\\"username\\").toString());
    $(\\"#password\\").val(vars.get(\\"password\\").toString());
    $(\\".fa\\").click();
  }
  @Test
  public void invalidcredentials() {
    vars.put(\\"username\\", \\"blah\\");
    vars.put(\\"password\\", \\"blah\\");
    login();
  }
  @Test
  public void validcredentials() {
    vars.put(\\"username\\", \\"tomsmith\\");
    vars.put(\\"password\\", \\"SuperSecretPassword!\\");
    login();
  }
}
"
`;

exports[`Code Export Java Selenide should export a suite with commands that open a new window inside of a reused test method 1`] = `
"// Generated by Selenium IDE
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import com.codeborne.selenide.Configuration;
import com.codeborne.selenide.WebDriverRunner;
import static com.codeborne.selenide.Selectors.*;
import static com.codeborne.selenide.Condition.*;
import static com.codeborne.selenide.Selenide.*;
import static org.junit.jupiter.api.Assertions.*;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Keys;
import java.util.*;
public class DefaultSuiteTest {
  private Map<String, Object> vars;
  @BeforeEach
  public void setUp() {
    Configuration.browser = \\"chrome\\";
    vars = new HashMap<>();
  }
  @AfterEach
  public void tearDown() {
  }
  public String waitForWindow(int timeout) {
    sleep(timeout);
    Set<String> whNow = WebDriverRunner.getWebDriver().getWindowHandles();
    Set<String> whThen = (Set<String>) vars.get(\\"window_handles\\");
    if (whNow.size() > whThen.size()) {
      whNow.removeAll(whThen);
    }
    return whNow.iterator().next();
  }
  public void selectwindow() {
    open(\\"http://the-internet.herokuapp.com/windows\\");
    vars.put(\\"window_handles\\", WebDriverRunner.getWebDriver().getWindowHandles());
    $(byLinkText(\\"Click Here\\")).click();
    vars.put(\\"win9425\\", waitForWindow(2000));
    switchTo().window(vars.get(\\"win9425\\").toString());
    assertEquals(title(), \\"New Window\\");
  }
  @Test
  public void reuse() {
    selectwindow();
  }
}
"
`;

exports[`Code Export Java Selenide should export a suite with just one new window util method when there are multiple commands that open a new window 1`] = `
"// Generated by Selenium IDE
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import com.codeborne.selenide.Configuration;
import com.codeborne.selenide.WebDriverRunner;
import static com.codeborne.selenide.Selectors.*;
import static com.codeborne.selenide.Condition.*;
import static com.codeborne.selenide.Selenide.*;
import static org.junit.jupiter.api.Assertions.*;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Keys;
import java.util.*;
public class DefaultSuiteTest {
  private Map<String, Object> vars;
  @BeforeEach
  public void setUp() {
    Configuration.browser = \\"chrome\\";
    vars = new HashMap<>();
  }
  @AfterEach
  public void tearDown() {
  }
  public String waitForWindow(int timeout) {
    sleep(timeout);
    Set<String> whNow = WebDriverRunner.getWebDriver().getWindowHandles();
    Set<String> whThen = (Set<String>) vars.get(\\"window_handles\\");
    if (whNow.size() > whThen.size()) {
      whNow.removeAll(whThen);
    }
    return whNow.iterator().next();
  }
  public void selectwindow() {
    open(\\"http://the-internet.herokuapp.com/windows\\");
    vars.put(\\"window_handles\\", WebDriverRunner.getWebDriver().getWindowHandles());
    $(byLinkText(\\"Click Here\\")).click();
    vars.put(\\"win9425\\", waitForWindow(2000));
    switchTo().window(vars.get(\\"win9425\\").toString());
    assertEquals(title(), \\"New Window\\");
  }
  @Test
  public void reuse() {
    selectwindow();
  }
  @Test
  public void selectwindow() {
    open(\\"http://the-internet.herokuapp.com/windows\\");
    vars.put(\\"window_handles\\", WebDriverRunner.getWebDriver().getWindowHandles());
    $(byLinkText(\\"Click Here\\")).click();
    vars.put(\\"win9425\\", waitForWindow(2000));
    switchTo().window(vars.get(\\"win9425\\").toString());
    assertEquals(title(), \\"New Window\\");
  }
}
"
`;

exports[`Code Export Java Selenide should export a test 1`] = `
"// Generated by Selenium IDE
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import com.codeborne.selenide.Configuration;
import com.codeborne.selenide.WebDriverRunner;
import static com.codeborne.selenide.Selectors.*;
import static com.codeborne.selenide.Condition.*;
import static com.codeborne.selenide.Selenide.*;
import static org.junit.jupiter.api.Assertions.*;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Keys;
import java.util.*;
public class LoginTest {
  private Map<String, Object> vars;
  @BeforeEach
  public void setUp() {
    Configuration.browser = \\"chrome\\";
    vars = new HashMap<>();
  }
  @AfterEach
  public void tearDown() {
  }
  @Test
  public void login() {
    open(\\"http://the-internet.herokuapp.com/login\\");
    WebDriverRunner.getWebDriver().manage().window().setSize(new Dimension(1440, 1177));
    $(\\"#username\\").val(\\"tomsmith\\");
    $(\\"#password\\").val(\\"SuperSecretPassword!\\");
    $(\\"#login button\\").click();
    $(\\".flash.success\\").shouldHave(text(\\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"));
  }
}
"
`;

exports[`Code Export Java Selenide should export a test with a grid configuration 1`] = `
"// Generated by Selenium IDE
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import com.codeborne.selenide.Configuration;
import com.codeborne.selenide.WebDriverRunner;
import static com.codeborne.selenide.Selectors.*;
import static com.codeborne.selenide.Condition.*;
import static com.codeborne.selenide.Selenide.*;
import static org.junit.jupiter.api.Assertions.*;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Keys;
import java.util.*;
public class LoginTest {
  private Map<String, Object> vars;
  @BeforeEach
  public void setUp() {
    Configuration.browser = \\"firefox\\";
    Configuration.remote = \\"http://localhost:4444/wd/hub\\";
    vars = new HashMap<>();
  }
  @AfterEach
  public void tearDown() {
  }
  @Test
  public void login() {
    open(\\"http://the-internet.herokuapp.com/login\\");
    WebDriverRunner.getWebDriver().manage().window().setSize(new Dimension(1440, 1177));
    $(\\"#username\\").val(\\"tomsmith\\");
    $(\\"#password\\").val(\\"SuperSecretPassword!\\");
    $(\\"#login button\\").click();
    $(\\".flash.success\\").shouldHave(text(\\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"));
  }
}
"
`;

exports[`Code Export Java Selenide should export a test with a reused test method 1`] = `
"// Generated by Selenium IDE
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import com.codeborne.selenide.Configuration;
import com.codeborne.selenide.WebDriverRunner;
import static com.codeborne.selenide.Selectors.*;
import static com.codeborne.selenide.Condition.*;
import static com.codeborne.selenide.Selenide.*;
import static org.junit.jupiter.api.Assertions.*;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Keys;
import java.util.*;
public class ValidcredentialsTest {
  private Map<String, Object> vars;
  @BeforeEach
  public void setUp() {
    Configuration.browser = \\"chrome\\";
    vars = new HashMap<>();
  }
  @AfterEach
  public void tearDown() {
  }
  public void login() {
    open(\\"https://the-internet.herokuapp.com/\\");
    $(byLinkText(\\"Form Authentication\\")).click();
    $(\\"#username\\").val(vars.get(\\"username\\").toString());
    $(\\"#password\\").val(vars.get(\\"password\\").toString());
    $(\\".fa\\").click();
  }
  @Test
  public void validcredentials() {
    vars.put(\\"username\\", \\"tomsmith\\");
    vars.put(\\"password\\", \\"SuperSecretPassword!\\");
    login();
  }
}
"
`;

exports[`Code Export Java Selenide should export a test with commands that open a new window 1`] = `
"// Generated by Selenium IDE
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import com.codeborne.selenide.Configuration;
import com.codeborne.selenide.WebDriverRunner;
import static com.codeborne.selenide.Selectors.*;
import static com.codeborne.selenide.Condition.*;
import static com.codeborne.selenide.Selenide.*;
import static org.junit.jupiter.api.Assertions.*;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Keys;
import java.util.*;
public class SelectwindowTest {
  private Map<String, Object> vars;
  @BeforeEach
  public void setUp() {
    Configuration.browser = \\"chrome\\";
    vars = new HashMap<>();
  }
  @AfterEach
  public void tearDown() {
  }
  public String waitForWindow(int timeout) {
    sleep(timeout);
    Set<String> whNow = WebDriverRunner.getWebDriver().getWindowHandles();
    Set<String> whThen = (Set<String>) vars.get(\\"window_handles\\");
    if (whNow.size() > whThen.size()) {
      whNow.removeAll(whThen);
    }
    return whNow.iterator().next();
  }
  @Test
  public void selectwindow() {
    open(\\"http://the-internet.herokuapp.com/\\");
    WebDriverRunner.getWebDriver().manage().window().setSize(new Dimension(1260, 1027));
    $(byLinkText(\\"Multiple Windows\\")).click();
    vars.put(\\"window_handles\\", WebDriverRunner.getWebDriver().getWindowHandles());
    $(byLinkText(\\"Click Here\\")).click();
    vars.put(\\"win9625\\", waitForWindow(2000));
    vars.put(\\"root\\", WebDriverRunner.getWebDriver().getWindowHandle());
    switchTo().window(vars.get(\\"win9625\\").toString());
    assertEquals(title(), \\"New Window\\");
    switchTo().window(vars.get(\\"root\\").toString());
    assertEquals(title(), \\"The Internet\\");
  }
}
"
`;
