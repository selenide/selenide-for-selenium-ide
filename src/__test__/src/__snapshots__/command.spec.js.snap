// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`command code emitter should emit 'assert selected label' command 1`] = `"$(Selectors.byId(\\"test\\")).getSelectedOption().shouldHave(text(\\"test\\"));"`;

exports[`command code emitter should emit 'verify selected label' command 1`] = `"$(Selectors.byId(\\"test\\")).getSelectedOption().shouldHave(text(\\"test\\"));"`;

exports[`command code emitter should emit \`add selection\` command 1`] = `"$(\\"select\\").selectOption(\\"A label\\");"`;

exports[`command code emitter should emit \`answer on visible prompt\` command 1`] = `"Selenide.prompt(\\"an answer\\");"`;

exports[`command code emitter should emit \`assert alert\` command 1`] = `"assertEquals(Selenide.switchTo().alert().getText(), \\"an alert\\");"`;

exports[`command code emitter should emit \`assert checked\` command 1`] = `"$(Selectors.byId(\\"check\\")).shouldBe(selected);"`;

exports[`command code emitter should emit \`assert confirmation\` command 1`] = `"assertEquals(Selenide.switchTo().alert().getText(), \\"a confirmation\\");"`;

exports[`command code emitter should emit \`assert editable\` command 1`] = `"$(Selectors.byId(\\"text\\")).shouldBe(enabled, not(readonly));"`;

exports[`command code emitter should emit \`assert element not present\` command 1`] = `"$(Selectors.byId(\\"element\\")).shouldNot(exist);"`;

exports[`command code emitter should emit \`assert element present\` command 1`] = `"$(Selectors.byId(\\"element\\")).should(exist);"`;

exports[`command code emitter should emit \`assert not checked\` command 1`] = `"$(Selectors.byId(\\"check\\")).shouldNotBe(checked);"`;

exports[`command code emitter should emit \`assert not editable\` command 1`] = `"$(Selectors.byId(\\"text\\")).shouldNotBe(enabled);"`;

exports[`command code emitter should emit \`assert not selected value\` command 1`] = `"$(Selectors.byId(\\"select\\")).shouldNotHave(value(\\"test\\"));"`;

exports[`command code emitter should emit \`assert not text\` command 1`] = `"$(Selectors.byId(\\"test\\")).shouldNotHave(text(\\"text\\"));"`;

exports[`command code emitter should emit \`assert prompt\` command 1`] = `"assertEquals(Selenide.switchTo().alert().getText(), \\"a prompt\\");"`;

exports[`command code emitter should emit \`assert selected value\` command 1`] = `"$(Selectors.byId(\\"select\\")).shouldHave(value(\\"test\\"));"`;

exports[`command code emitter should emit \`assert text\` command 1`] = `"$(Selectors.byId(\\"test\\")).shouldHave(text(\\"some text that should be here\\"));"`;

exports[`command code emitter should emit \`assert title\` command 1`] = `"assertEquals(Selenide.title(), \\"example title\\");"`;

exports[`command code emitter should emit \`assert value\` command 1`] = `"$(Selectors.byId(\\"select\\")).shouldHave(value(\\"test\\"));"`;

exports[`command code emitter should emit \`assert\` command 1`] = `"assertEquals(vars.get(\\"varrrName\\").toString(), \\"blah\\");"`;

exports[`command code emitter should emit \`check\` command 1`] = `"$(Selectors.byId(\\"f\\")).setSelected(true);"`;

exports[`command code emitter should emit \`choose cancel on visible prompt\` command 1`] = `"Selenide.dismiss();"`;

exports[`command code emitter should emit \`choose ok on visible confirmation\` command 1`] = `"Selenide.confirm();"`;

exports[`command code emitter should emit \`click at\` command 1`] = `"$(Selectors.byLinkText(\\"button\\")).click();"`;

exports[`command code emitter should emit \`click\` command 1`] = `"$(Selectors.byLinkText(\\"button\\")).click();"`;

exports[`command code emitter should emit \`close\` command 1`] = `"WebDriverRunner.closeWindow();"`;

exports[`command code emitter should emit \`do\` command 1`] = `
Object {
  "body": "do {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit \`double click at\` command 1`] = `"$(Selectors.byLinkText(\\"button\\")).doubleClick();"`;

exports[`command code emitter should emit \`double click\` command 1`] = `"$(Selectors.byLinkText(\\"button\\")).doubleClick();"`;

exports[`command code emitter should emit \`drag and drop to object\` command 1`] = `"$(Selectors.byLinkText(\\"dragged\\")).dragAndDropTo(Selectors.byLinkText(\\"dropped\\"));"`;

exports[`command code emitter should emit \`echo\` command 1`] = `"System.out.println(\\"blah\\");"`;

exports[`command code emitter should emit \`echo\` command with variables 1`] = `"System.out.println(vars.get(\\"blah\\").toString());"`;

exports[`command code emitter should emit \`edit content\` command 1`] = `
"{
  SelenideElement element = $(Selectors.byId(\\"contentEditable\\"));
  Selenide.executeJavaScript(\\"if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<button>test</button>'}\\", element);
}"
`;

exports[`command code emitter should emit \`else if\` command 1`] = `
Object {
  "body": "} else if ((Boolean) Selenide.executeJavaScript(\\"return (true)\\")) {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit \`else\` command 1`] = `
Object {
  "body": "} else {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit \`end\` command 1`] = `
Object {
  "body": "}",
  "endingLevel": 0,
}
`;

exports[`command code emitter should emit \`execute async script\` command 1`] = `"vars.put(\\"myVar\\", Selenide.executeAsyncJavaScript(\\"var callback = arguments[arguments.length - 1];javascript.then(callback).catch(callback);\\"));"`;

exports[`command code emitter should emit \`execute script\` command 1`] = `"vars.put(\\"myVar\\", Selenide.executeJavaScript(\\"javascript\\"));"`;

exports[`command code emitter should emit \`execute script\` command with return string value 1`] = `"vars.put(\\"myVar\\", Selenide.executeJavaScript(\\"return 'a'\\"));"`;

exports[`command code emitter should emit \`forEach\` command 1`] = `
Object {
  "body": "ArrayList collectionCollection = (ArrayList) vars.get(\\"collection\\");
for (int iIteratorVar = 0; iIteratorVar < collectionCollection.size() - 1; iIteratorVar++) {
  vars.put(\\"iteratorVar\\", collectionCollection.get(iIteratorVar));",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit \`if\` command 1`] = `
Object {
  "body": "if ((Boolean) Selenide.executeJavaScript(\\"return (true)\\")) {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit \`mouse down at\` event 1`] = `"Selenide.actions().moveToElement($(Selectors.byId(\\"button\\"))).clickAndHold().perform();"`;

exports[`command code emitter should emit \`mouse down\` command 1`] = `"Selenide.actions().moveToElement($(Selectors.byId(\\"button\\"))).clickAndHold().perform();"`;

exports[`command code emitter should emit \`mouse move at\` event 1`] = `"Selenide.actions().moveToElement($(Selectors.byId(\\"button\\"))).perform();"`;

exports[`command code emitter should emit \`mouse move\` event 1`] = `"Selenide.actions().moveToElement($(Selectors.byId(\\"button\\"))).perform();"`;

exports[`command code emitter should emit \`mouse out\` event 1`] = `"Selenide.actions().moveToElement($(Selectors.byTagName(\\"body\\")), 0, 0).perform();"`;

exports[`command code emitter should emit \`mouse over\` event 1`] = `"Selenide.actions().moveToElement($(Selectors.byId(\\"button\\"))).perform();"`;

exports[`command code emitter should emit \`mouse up at\` event 1`] = `"Selenide.actions().moveToElement($(Selectors.byId(\\"button\\"))).release().perform();"`;

exports[`command code emitter should emit \`mouse up\` event 1`] = `"Selenide.actions().moveToElement($(Selectors.byId(\\"button\\"))).release().perform();"`;

exports[`command code emitter should emit \`open\` with absolute url 1`] = `"Selenide.open(\\"https://www.seleniumhq.org/\\");"`;

exports[`command code emitter should emit \`pause\` command 1`] = `"Selenide.sleep(300);"`;

exports[`command code emitter should emit \`remove selection\` command 1`] = `"$(\\"select\\").selectOption(\\"A label\\");"`;

exports[`command code emitter should emit \`repeatIf\` command 1`] = `"} while ((Boolean) Selenide.executeJavaScript(\\"return (true)\\"));"`;

exports[`command code emitter should emit \`run script\` command 1`] = `"Selenide.executeJavaScript(\\"alert('test');alert('Im annoying');\\");"`;

exports[`command code emitter should emit \`run\` command 1`] = `"sometestcase();"`;

exports[`command code emitter should emit \`select frame\` to select the top frame 1`] = `"Selenide.switchTo().defaultContent();"`;

exports[`command code emitter should emit \`select window\` to select a window by handle 1`] = `"Selenide.switchTo().window(vars.get(\\"window\\").toString());"`;

exports[`command code emitter should emit \`select window\` to select a window by implicit index 1`] = `"Selenide.switchTo().window(12);"`;

exports[`command code emitter should emit \`select window\` to select a window by name 1`] = `"Selenide.switchTo().window(\\"window\\");"`;

exports[`command code emitter should emit \`select window\` to select a window by the local keyword 1`] = `"Selenide.switchTo().window(0);"`;

exports[`command code emitter should emit \`select\` command 1`] = `"$(\\"select\\").selectOption(\\"A label\\");"`;

exports[`command code emitter should emit \`send keys\` command 1`] = `"$(Selectors.byId(\\"input\\")).val(\\"example input\\");"`;

exports[`command code emitter should emit \`send keys\` command with a key press 1`] = `"$(Selectors.byId(\\"input\\")).val(\\"SuperSecretPassword!\\").sendKeys(Keys.ENTER);"`;

exports[`command code emitter should emit \`send keys\` command with a variable input 1`] = `"$(Selectors.byId(\\"input\\")).val(vars.get(\\"blah\\").toString());"`;

exports[`command code emitter should emit \`set speed\` 1`] = `"System.out.println(\\"\`set speed\` is a no-op in code export, use \`pause\` instead\\");"`;

exports[`command code emitter should emit \`setWindowSize\` 1`] = `"WebDriverRunner.getWebDriver().manage().window().setSize(new Dimension(1440, 1177));"`;

exports[`command code emitter should emit \`store attribute\` command 1`] = `
"{
  String attribute = $(Selectors.byXpath(\\"button[3]\\")).getAttribute(\\"id\\");
  vars.put(\\"myVar\\", attribute);
}"
`;

exports[`command code emitter should emit \`store text\` command 1`] = `"vars.put(\\"myVar\\", $(Selectors.byId(\\"someElement\\")).text());"`;

exports[`command code emitter should emit \`store title\` command 1`] = `"vars.put(\\"myVar\\", Selenide.title());"`;

exports[`command code emitter should emit \`store value\` command 1`] = `"vars.put(\\"myVar\\", $(Selectors.byId(\\"someElement\\")).getAttribute(\\"value\\"));"`;

exports[`command code emitter should emit \`store window handle\` command 1`] = `"vars.put(\\"windowName\\", WebDriverRunner.getWebDriver().getWindowHandle());"`;

exports[`command code emitter should emit \`store xpath count\` command 1`] = `"vars.put(\\"myVar\\", $$(Selectors.byXpath(\\"button\\")).size());"`;

exports[`command code emitter should emit \`store\` command 1`] = `"vars.put(\\"myVar\\", \\"some value\\");"`;

exports[`command code emitter should emit \`submit\` command 1`] = `"$(Selectors.byId(\\"form\\")).submit();"`;

exports[`command code emitter should emit \`times\` command 1`] = `
Object {
  "body": "Integer times = 5;
for(int i = 0; i < times; i++) {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit \`type\` command 1`] = `"$(Selectors.byId(\\"input\\")).val(\\"example input\\");"`;

exports[`command code emitter should emit \`uncheck\` command 1`] = `"$(Selectors.byId(\\"f\\")).setSelected(false);"`;

exports[`command code emitter should emit \`verify checked\` command 1`] = `"$(Selectors.byId(\\"check\\")).shouldBe(selected);"`;

exports[`command code emitter should emit \`verify editable\` command 1`] = `"$(Selectors.byId(\\"text\\")).shouldBe(enabled, not(readonly));"`;

exports[`command code emitter should emit \`verify element not present\` command 1`] = `"$(Selectors.byId(\\"element\\")).shouldNot(exist);"`;

exports[`command code emitter should emit \`verify element present\` command 1`] = `"$(Selectors.byId(\\"element\\")).should(exist);"`;

exports[`command code emitter should emit \`verify not checked\` command 1`] = `"$(Selectors.byId(\\"check\\")).shouldNotBe(checked);"`;

exports[`command code emitter should emit \`verify not editable\` command 1`] = `"$(Selectors.byId(\\"text\\")).shouldNotBe(enabled);"`;

exports[`command code emitter should emit \`verify not selected value\` command 1`] = `"$(Selectors.byId(\\"select\\")).shouldNotHave(value(\\"test\\"));"`;

exports[`command code emitter should emit \`verify not text\` command 1`] = `"$(Selectors.byId(\\"test\\")).shouldNotHave(text(\\"text\\"));"`;

exports[`command code emitter should emit \`verify selected value\` command 1`] = `"$(Selectors.byId(\\"select\\")).shouldHave(value(\\"test\\"));"`;

exports[`command code emitter should emit \`verify text\` command 1`] = `"$(Selectors.byId(\\"test\\")).shouldHave(text(\\"some text that should be here\\"));"`;

exports[`command code emitter should emit \`verify title\` command 1`] = `"assertEquals(Selenide.title(), \\"example title\\");"`;

exports[`command code emitter should emit \`verify value\` command 1`] = `"$(Selectors.byId(\\"select\\")).shouldHave(value(\\"test\\"));"`;

exports[`command code emitter should emit \`verify\` command 1`] = `"assertEquals(vars.get(\\"varrrName\\").toString(), \\"blah\\");"`;

exports[`command code emitter should emit \`waitForElementEditable\` command 1`] = `
"{
  $(\\"#blah\\").waitUntil(visible, 5000);
  $(\\"#blah\\").shouldBe(enabled);
}"
`;

exports[`command code emitter should emit \`waitForElementNotEditable\` command 1`] = `"$(\\"#blah\\").waitUntil(not(enabled), 5000);"`;

exports[`command code emitter should emit \`waitForElementNotPresent\` command 1`] = `"$(\\"#blah\\").waitUntil(not(exist), 5000);"`;

exports[`command code emitter should emit \`waitForElementNotVisible\` command 1`] = `"$(\\"#blah\\").waitUntil(disappears, 5000);"`;

exports[`command code emitter should emit \`waitForElementPresent\` command 1`] = `"$(\\"#blah\\").waitUntil(exist, 5000);"`;

exports[`command code emitter should emit \`waitForElementVisible\` command 1`] = `"$(\\"#blah\\").waitUntil(visible, 5000);"`;

exports[`command code emitter should emit \`waitForText\` command 1`] = `"$(\\"#blah\\").waitUntil(text(\\"text\\"), 30000);"`;

exports[`command code emitter should emit \`while\` command 1`] = `
Object {
  "body": "while ((Boolean) Selenide.executeJavaScript(\\"return (true)\\")) {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit new window handling, if command opens a new window 1`] = `
"vars.put(\\"window_handles\\", WebDriverRunner.getWebDriver().getWindowHandles());
$(\\"button\\").click();
vars.put(\\"newWin\\", waitForWindow(2000));"
`;

exports[`command code emitter should skip playback supported commands, that are not supported in webdriver 1`] = `""`;

exports[`command code emitter should skip playback supported commands, that are not supported in webdriver 2`] = `""`;

exports[`command code emitter should skip playback supported commands, that are not supported in webdriver 3`] = `""`;

exports[`command code emitter should skip playback supported commands, that are not supported in webdriver 4`] = `""`;
